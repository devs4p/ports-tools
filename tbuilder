#!/bin/sh

readonly PORTSDIR=${PORTSDIR:-/usr/ports}
readonly PATH="${PATH}:${PORTSDIR}/Tools/scripts"
readonly POUDRIERE_DIR="${POUDRIERE_DIR:-/usr/local/poudriere}"
readonly POUDRIERE_PORTS="${POUDRIERE_PORTS:-${POUDRIERE_DIR}/ports/default}"

if [ ! -d "${POUDRIERE_PORTS}" ]; then
	echo "Ports directory not found: ${POUDRIERE_PORTS}, try setting POUDRIERE_PORTS variable"
	exit 1
fi

readonly command="${1}"
readonly query="${2}"
readonly build="${3:-none}"

display_usage() {
	<< EOF cat
Usage: tbuilder <command> <query> [jail_name] [poudriere testport args]

 command: bdeps - build ports having certain build dependency
          file  - build ports read from file
          grep  - build ports containing phrase in Makefile
          ldeps - build ports linking with certain library
          match - build ports with name matching certain phrase
          name  - build specific port

 query: (bdeps|match) - portname
        (file) - name of file to read category/port entries from
        (grep) - grep pattern
        (ldeps) - category/port
        (name) - category/port or '.' to build port from current directory

 jail_name: poudriere jail name or 'all' for all available jails

EOF
	exit
}

poudriere_jails() {
	poudriere jail -lq | cut -d" " -f1
}

poudriere_test_build() {
	local jname="${1}" port="${2%%:*}" option="${2##*:}"
	local port_cfg=""

	if [ "${port}" != "${option}" ]; then
		if [ "${option}" != "OPT_UNKNOWN"  ]; then
			echo "*** port ${port} needs ${option} to be set ***"
			port_cfg="-c"
		else
			echo "*** port ${port} unknown option needed ***"
		fi
	fi

	sudo poudriere testport -j ${jname} -o ${port} ${poudriere_args} ${port_cfg}
	if [ ${?} -ne 0 ]; then
		BUILD_RESULTS="${BUILD_RESULTS} ${port}:${jname}:failed"
	else
		BUILD_RESULTS="${BUILD_RESULTS} ${port}:${jname}:success"
	fi
}

[ -z "${query}" ] && display_usage

if [ "${build}" != "none" -a "${build}" != "all" \
	-a -z "$(poudriere_jails | grep ${build})" ]
then
	printf "${build}: no such poudriere jail\n\n"
	display_usage
fi

if [ -n "${4}" ]; then
	shift 3;
	poudriere_args="${*}";
fi

case ${command} in
bdeps)
	ports="$(portsearch -b ${query} | grep Path: | cut -f 4- -d '/')" ;;
file)
	if [ ! -f "${query}" ]; then
		echo "File ${query} does not exists"
		exit 1
	fi
	ports="$(cat "${query}")" ;;
grep)
	ports="$(cd ${POUDRIERE_PORTS} && find . -name "Makefile*" -exec \
		grep -q "${query}" {} \; -print | grep -v "${query}/Makefile" \
		| sed -E 's;(\./|/Makefile);;g')" ;;
ldeps)
	if [ ! -d "${POUDRIERE_PORTS}/${query}" ]; then
		printf "${POUDRIERE_PORTS}/${query}: port directory does not exists\n\n"
		display_usage
	fi
	tmp="$(cd ${POUDRIERE_PORTS} && find . -name "Makefile*" -exec grep -q \
		"^[^#].*${query}[ \\]*\$" {} \; -print | sed 's|\./||')"

	for path in ${tmp}; do
		path="$(dirname ${path})"
		[ "${query}" != "${path}" ] || continue
		cd ${POUDRIERE_PORTS}/${path}
		if [ -n "$(make -V LIB_DEPENDS | grep ${query})" ]; then
			ports="${ports} ${path}"
			continue
		fi
		
		for option in $(make pretty-print-config); do
			[ -n "$(echo ${option} | grep ^-)" ] || continue
			[ -z "$(make -V RUN_DEPENDS WITH_${option#-}=yes | \
				grep ${query})" ] || continue 2
			[ -n "$(make -V LIB_DEPENDS WITH_${option#-}=yes | \
				grep ${query})" ] || continue
			ports="${ports} ${path}:${option#-}"
			continue 2
		done
		
		ports="${ports} ${path}:OPT_UNKNOWN"
	done
	;;	
match)
	ports="$(portsearch -n ${query} | grep Path: | cut -f 4- -d '/')" ;;
name)
	if [ "${query}" != "." -a ! -d "${POUDRIERE_PORTS}/${query}" ]; then
		printf "${POUDRIERE_PORTS}/${query}: port directory does not exists\n\n"
		display_usage
	fi
	ports="${query}"
	[ "${ports}" = "." ] && ports="$(echo ${PWD} | \
		awk '{ n = split($0, p ,"/"); print p[n-1] "/" p[n]; }')" ;;
*)
	display_usage
esac

for port in ${ports}; do
	case ${build} in
	none)
		if [ "${command}" != "name" ]; then
			case ${port##*:} in
			"${port}")
				echo "Found match: ${port%%:*}" ;;
			"OPT_UNKNOWN")
				echo "Found match: ${port%%:*}, unknown option needed" ;;
			*)
				echo "Found match: ${port%%:*}, needs ${port##*:}=on" ;;
			esac
		fi
		;;
	all)
		for b in $(poudriere_jails | sort -h); do 
			poudriere_test_build ${b} ${port}
		done ;;
	*)
		poudriere_test_build ${build} ${port}
	esac
done

if [ -n "${BUILD_RESULTS}" ]; then
	printf "\n===> Following build(s) were performed:\n"
	printf "%-40s %-15s %s\n" "PORTNAME" "JAIL" "RESULT"

	for result in ${BUILD_RESULTS}; do
		printf "%-40s %-15s %s\n" "${result%%:*}" \
			"$(echo ${result} | awk -F: '{ print $2 }')" \
			"${result##*:}"
	done
	echo ""
fi

