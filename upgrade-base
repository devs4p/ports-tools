#!/bin/sh

readonly MAKE=${MAKE:-make}
readonly PSVN=${PSVN:-svn}
readonly SRCDIR=${SRCDIR:-/usr/src}
readonly XDG_CONFIG_HOME="${XDG_CONFIG_HOME:-${HOME}/.config}"
readonly CONF_FILE="${XDG_CONFIG_HOME}/upgrade-base"
readonly tcols=$(stty size | cut -d" " -f2)
readonly tlines=$(stty size | cut -d" " -f1)

[ $tcols -lt 80 ] && dwidth=$((tcols-4)) || dwidth=76

skip_tree_update=0	# don't update system sources before build

ask_yesno() {
	while true; do
		echo -n "${1} (y/n)? [y] "
		
		read answer
		[ -n "${answer}" ] || answer="y"

		case ${answer} in
		[Nn])
			return 1 ;;
		[Yy])
			return 0
		esac
	done
}

delete_old_files() {
	local tmpfile="$(mktemp -t ${0##*/})"
	[ -z "${tmpfile}" ] && return

	for type in libs files dirs; do
		${MAKE} check-old-${type} | grep '^/' > ${tmpfile}
		tstr="$(echo $type | cut -b1)"
		for file in $(cat ${tmpfile}); do
			items="${items} \"${file}\" ${tstr} on"
		done
	done
	if [ -n "${items}" ]; then
		echo "--stdout --checklist \"Choose old files to delete\" \
			$((tlines-3)) ${dwidth} $((tlines-5)) \
			${items}" > ${tmpfile}
		to_remove="$(dialog --file ${tmpfile})"
		dialog --clear
		for file in ${to_remove}; do
			rm -rf ${file}
		done
	fi
	rm ${tmpfile}
}

display_usage() {
	<< EOF >&2 cat
Usage: ${0##*/} [-c|-h|-s|-u]

    -c - do not clean tree before build (NO_CLEAN=yes)
    -h - show this help
    -s - reset status and begin from start
    -u - don't update system source tree before build
EOF
	exit 1
}

# $1 make target
# $2 state status afterwards
exec_cmd() {
	${1}
	if [ ${?} -ne 0 ]; then
		echo "===> '${1}' failed" >&2
		exit 1
	fi
	save_state "${2}"
}

last_updating_entry() {
	if [ -f "${SRCDIR}/UPDATING" ]; then
		egrep -m 1 '^[0-9]{8}\:' ${SRCDIR}/UPDATING | sed 's|:||'
	else
		echo "0"
	fi
}

main_loop() {
	state="$(cat ${CONF_FILE} 2>/dev/null)"

	case ${state} in
	"")
		if [ ${skip_tree_update} -eq 0 ]; then
			l_entry=$(last_updating_entry)
			${PSVN} update
			if [ ${?} -ne 0 ]; then
				echo "===> Updating of source tree failed" >&2
				exit 1
			fi

			n_entry=$(last_updating_entry)
			if [ ${n_entry} -gt ${l_entry} ]; then
				printf "New entries since last upgrade in ${SRCDIR}/UPDATING file:\n\n"
				awk -v entry="${l_entry}" '
				BEGIN { new_entry=0; }
	
				/^[0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9]:/ {
					curr_entry=$0;
					sub(":", "", curr_entry);
					if (entry == curr_entry)
						exit;
					else
						new_entry=1;
				}

				{
					if (new_entry == 1)
						print $0;
				}' ${SRCDIR}/UPDATING

				ask_yesno "Continue with upgrade"
				if [ ${?} -ne 0 ]; then
					save_state "REPO_UPDATED"
					exit
				fi
			fi
		fi

		save_state "REPO_UPDATED" ;;
	"REPO_UPDATED")
		exec_cmd "${MAKE} buildworld ${make_args}" "WORLD_BUILT" ;;
	"WORLD_BUILT")
		exec_cmd "${MAKE} buildkernel ${make_args}" "KERNEL_BUILT" ;;
	"KERNEL_BUILT")
		exec_cmd "${MAKE} installkernel ${make_args}" "KERNEL_INSTALLED"
		printf "\n===> You need to restart computer now.\n\n"
		exit 0 ;;
	"KERNEL_INSTALLED")
		exec_cmd "mergemaster -p" "MERGEMASTER_INIT"  ;;
	"MERGEMASTER_INIT")
		exec_cmd "${MAKE} installworld ${make_args}" "WORLD_INSTALLED" ;;
	"WORLD_INSTALLED")
		exec_cmd "mergemaster -Fui" "MERGEMASTER_DONE" ;;
	"MERGEMASTER_DONE")
		if ask_yesno "Delete old files from system"; then
			echo "===> Checking for old files..."
			delete_old_files
		fi
		save_state ""
		printf "\n===> You need to restart computer again.\n\n"
		exit 0 ;;
	*)
		echo "===> Garbage in ${CONF_FILE}, try upgrade-base -s" >&2
		exit 1
	esac
	main_loop	
}

# $1 state
save_state() {
	[ -d ${XDG_CONFIG_HOME} ] || mkdir ${XDG_CONFIG_HOME}
	echo "${1}" > ${CONF_FILE}
}

while getopts "chsu" option; do
	case ${option} in
	c)
		make_args="${make_args} NO_CLEAN=yes" ;;
	s)
		echo > ${CONF_FILE} ;;
	u)
		skip_tree_update=1 ;;
	*)
		display_usage
	esac
done

if [ "$(id -u)" != "0" ]; then
	echo "You need root privileges to upgrade base system" >&2
	exit 1
fi

# needed for rebuilding kernel modules ports
PORTSDIR=${PORTSDIR:-/usr/ports}
[ -d "${PORTSDIR}" ] || \
	PORTSDIR="$(make -V PORTSDIR /usr/share/mk/bsd.ports.mk 2>/dev/null)"
if [ ! -d "${PORTSDIR}" ]; then
	echo "Ports directory not found: ${PORTSDIR}, try setting PORTSDIR variable" >&2
	exit 1
fi
make_args="${make_args} PORTSDIR=${PORTSDIR}"

jobs="$(sysctl -n hw.ncpu)"
[ -n "${jobs}" ] && make_args="${make_args} -j${jobs}"

cd ${SRCDIR}
main_loop
