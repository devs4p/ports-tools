#!/bin/sh

readonly PORTSDIR="$(make -V PORTSDIR /usr/share/mk/bsd.ports.mk 2>/dev/null)"
export PORTSDIR # needed for portlint

readonly hunspell="hunspell -d en_US"

skip_spellcheck=0 # skip spellchecking of descrption/message files

display_usage() {
	<< EOF >&2 cat
Usage: ${0##*/} [-h|-s]

    -h - show this help
    -s - skip spellcheck

EOF
	exit 1
}

reinplace_file() {
	local file="${1}" expr="${2}"
	
	[ -n "${expr}" ] || return
	sed -E "${expr}" ${file} > ${file}.new
	mv ${file}.new ${file}
}

while getopts "hs" option; do
	case ${option} in
	s)
		skip_spellcheck=1 ;;
	*)
		display_usage
	esac
done

if [ -z "$(make -V PKGNAME 2>/dev/null)" ]; then
	echo "===> This is not port directory" >&2
	exit 1
fi

descr_file="$(make -V DESCR)"

rej_files="$(find -E . -name "*.rej" ! -regex '\./(\.svn|work)/.*')"
if [ -n "${rej_files}" ]; then
	echo "===> Found rejected patch file(s)" >&2
	echo " ${rej_files}" | sed 's|./||g' >&2
	exit 1
fi

find -E . \( -name "*.orig" -or -size 0 \) ! -regex '\./(\.svn|work)/.*' -delete
if [ ${skip_spellcheck} -eq 0 ]; then
	which hunspell >/dev/null
	if [ ${?} -eq 0 ]; then
		[ -f "${descr_file}" ] && ${hunspell} "${descr_file}"
		[ -f pkg-message ] && ${hunspell} pkg-message
		[ -f files/pkg-message.in ] && ${hunspell} files/pkg-message.in
	else
		echo "===> Hunspell not found, skipping spellcheck"
	fi
fi

find -E . -type f ! -regex '\./(\.svn|work)/.*' | while read file; do
	if [ -z "$(tail -n 1 ${file} | tr '\n' '~' | grep '~$')" ]; then
		echo >> ${file}
		echo "===> Added final newline to ${file##./}"
	fi
done

comment="$(make -V COMMENT)"
if [ -n "$(echo ${comment} | grep -E '^(A|An) ')" ]; then
	new_comment="$(echo ${comment} | awk '{ 
		gsub("^(A|An) ", "", $0); 
		print toupper( substr($0, 1, 1) ) substr($0, 2);
	}')"
	sed_expr="s|^COMMENT=.*|COMMENT=	${new_comment}|"
	echo "===> Removed leading article from COMMENT"
fi
reinplace_file Makefile "${sed_expr}"

if [ -f "${descr_file}" ]; then	
	sed_expr=""
	if [ -n "$(grep '^Author:' ${descr_file})" ]; then
		sed_expr="/^Author:/d;"
		echo "===> Deleting Author: line from description file"
	fi

	if [ -n "$(grep -E '^WWW:(	| {2,})' ${descr_file})" ]; then
		sed_expr="${sed_expr} s#^WWW:(	| {2,})#WWW: #g;"
		echo "===> Fixing WWW: line in description file"
	fi
	reinplace_file "${descr_file}" "${sed_expr}"
else
	echo "===> Port's description file is missing"
fi

if which portlint >/dev/null; then
	echo "===> Portlint output:"
	portlint -abt
else
	echo "===> Portlint not found, skipping port checks"
fi

bdeps=$(pfind -b `make -V PORTNAME` | awk 'END {print NR}')
[ ${bdeps} -gt 0 ] && echo "===> Port is build dependency for ${bdeps} port(s)"

slaves="$(pfind -s `make -V CATEGORIES | awk '{print $1}'`"/"`basename $PWD`)"
if [ -n "${slaves}" ]; then
	echo "===> Found slave ports:"
	echo ${slaves} | tr ' ' '\n'
fi
