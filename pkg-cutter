#!/bin/sh

readonly XDG_HOME_CONFIG="${XDG_HOME_CONFIG:-$HOME/.config}"
readonly EXCLUDE_CONF="$XDG_HOME_CONFIG/pkg-cutter"
readonly LOCALBASE="${LOCALBASE:-/usr/local}"

exclude_opt=0
rm_count=0
sel_status="off"

display_usage() {
	echo "Usage: pkg-cutter [-h|-o|-x]"
	echo ""
	echo "    -h - show this help"
	echo "    -o - set selection to on by default"
	echo "    -x - update exclude list"
	echo ""
	exit
}

number_humanize() {
	echo "$1" | awk '{
		bytes = $0;
		gb=2^30; mb=2^20; kb=2^10;	
		
		if (bytes > gb) {
			size = bytes/gb;
			unit = "GB";
		} else if (bytes > mb) {
			size = bytes/mb;
			unit = "MB";
		} else if (bytes > kb) {
			size = bytes/kb;
			unit = "kB";
		} else {
			size = bytes;
			unit = "B ";
		}
		if (unit == "GB" || unit == "MB")
			printf "%.1f %s", size, unit;
		else
			printf "%.0f %s", size, unit;		
	}' | tr ',' '.'
}

update_exclude_list() {
	count=0
	
	for pkg in $(pkg query '%n@%v'); do
		status="off"
		case $pkg_exclude in *${pkg%@*}*) status="on" ;; esac
		items="$items ${pkg%@*} ${pkg#*@} $status"
		count=$((count+1))
	done

	tmpfile="$(mktemp -t pkg-cutter)"
	echo "--checklist \"Select packages to exclude ($count items):\" \
		21 70 19 $items" > $tmpfile
	excluded="$(dialog --stdout --file $tmpfile | sed 's|\"||g')"
	dialog --clear
	rm $tmpfile

	[ -z "$excluded" ] && exit
	[ -d "$XDG_HOME_CONFIG" ] || mkdir "$XDG_HOME_CONFIG"
	[ -f "$EXCLUDE_CONF" ] && rm -f "$EXCLUDE_CONF"

	for pkg in $excluded; do
		echo "$pkg" >> "$EXCLUDE_CONF"
	done
	exit
}

while getopts "hox" option; do
	case $option in
	o)
		[ $exclude_opt -eq 1 ] && display_usage
		sel_status="on" ;;
	x)
		[ "$sel_status" = "on" ] && display_usage
		exclude_opt=1 ;;
	*)
		display_usage	
	esac
done

if [ ! -x "${LOCALBASE}/sbin/pkg" ]; then
	echo "This script requires pkgNG (ports-mgmt/pkg)"
	exit 1
fi

if [ "$(id -u)" != "0" ]; then
	echo "You need root privileges to remove packages"
	exit 1
fi

[ -f "$EXCLUDE_CONF" ] && pkg_exclude="$(grep -v '^#' "$EXCLUDE_CONF")"
[ $exclude_opt -eq 1 ] && update_exclude_list

while true; do 
	pkg_leafs="$(pkg query -e '%#r = 0' %n-%v@%sb)"
	count=0
	items=""

	for pkg in $pkg_leafs; do
		case $pkg_seen in *${pkg%@*}*) continue;; esac
		case $pkg_exclude in *${pkg%-*}*) continue;; esac

		size="$(number_humanize ${pkg#*@})"
		pkg_seen="$pkg_seen ${pkg%@*}"
		items="$items ${pkg%@*} \"$(printf '%8s' "$size")\" $sel_status"
		count=$((count+1))
	done

	if [ $rm_count -gt 0 -a $count -gt 0 ]; then
		dialog --yesno "There are new leaf packages. Continue?" 5 43
		[ $? -eq 1 ] && break
	fi
	
	[ $count -eq 0 ] && break

	[ -z "$tmpfile" ] && tmpfile="$(mktemp -t pkg-cutter)"
	echo "--checklist \"Select packages to delete ($count items):\" \
		21 70 19 $items" > $tmpfile

	ret="$(dialog --stdout --file $tmpfile | sed 's|\"||g')"
	[ -z "$ret" ] && break
	
	for bytes in $(pkg query '%sb' $ret); do 
		rm_freed=$((rm_freed+bytes));
		rm_count=$((rm_count+1));
	done

	dialog --clear
	pkg-static delete -y $ret
done

if [ -n "$tmpfile" ]; then
	rm $tmpfile
	dialog --clear
fi

[ -z "$pkg_seen" ] && echo "No leaf packages to remove"

[ $rm_count -gt 0 ] && \
	echo "Packages removed: $rm_count  Disk space freed: $(number_humanize $rm_freed)"
