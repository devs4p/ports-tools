#!/bin/sh

readonly XDG_CONFIG_HOME="${XDG_CONFIG_HOME:-$HOME/.config}"
readonly CONFIG="${XDG_CONFIG_HOME}/upgrade-ports"
export readonly PORTSDIR=${PORTSDIR:-/usr/ports}

make_args="BATCH=yes DISABLE_LICENSES=yes DISABLE_VULNERABILITIES=yes"

answer_yes=0	# answer yes to all of the questions
skip_update=0	# don't update ports tree
wait_for_key=0	# wait for key press after update finish

ask_yesno() {
	[ ${answer_yes} -eq 0 ] || return 0
	while true; do
		printf "\n${1} (y/n)? [y] "

		read answer
		[ "${answer}" ] || answer="y"

		case ${answer} in
		[Nn])
			return 1 ;;
		[Yy])
			return 0
		esac
	done
}

check_for_missing_deps() {
	deps=$(make -C ${PORTSDIR}/${1} -VFETCH_DEPENDS -VEXTRACT_DEPENDS \
		-VPATCH_DEPENDS -VBUILD_DEPENDS -VLIB_DEPENDS -VRUN_DEPENDS |
		tr ' ' '\n' | cut -d':' -f2 | sort -u)
	for dep in ${deps}; do
		if ! pkg_exists ${dep}; then
			list_add need_install ${dep} $(check_for_missing_deps ${dep})
			list_add $(to_env_str ${dep})_reqby ${1}
		fi
	done
}

command_is_valid() {
	local old_IFS=${IFS}

	IFS=" "
	if [ "${*%% *}" = "pkg" ]; then
		cmd_pkg_validate ${*#pkg }
	else
		cmd_pm_validate ${*#portmaster }
	fi
	ret=${?}
	IFS=${old_IFS}
	return ${ret}
}

cmd_pkg_validate() {
	local cmd=${*%% *} exists=0 pkgname

	[ "${cmd}" = "info" -o "${cmd}" = "query" ] && return 1
	shift 1
	while getopts "fgn:o:y" opt; do
		case ${opt} in
		f|g|y)
			;;
		n|o)
			pkgname=${OPTARG%:*} ;;
		\?)
			echo "===> Pkg unhandled option"
			return 1
		esac
	done
	if [ ! "${cmd}" = "set" ]; then
		shift $((OPTIND-1))
		pkgname=${*}
	fi
	for pkg in ${pkgname}; do
		pkg_exists ${pkg} && exists=1
	done
	if [ ${exists} -eq 0 ]; then
		echo "===> ${pkgname} is not installed, skipping command"
		return 1
	fi
	return 0
}

cmd_pm_validate() {
	local cmd change_origin=0 exists=0 pkgname

	while getopts "Rafo:r:w" opt; do
		case ${opt} in
		a)
			echo "===> Skipping upgrade of all packages for now"
			return 1 ;;
		f|w|R)
			;;
		o)
			change_origin=1 ;;
		r)
			list_add pkgname ${OPTARG} ;;
		\?)
			echo "===> Portmaster unhandled option, skipping"
			return 1
		esac
	done
	shift $((OPTIND-1))
	if [ ${change_origin} -eq 1 ]; then
		pkgname=${*}
	else
		case ${*} in
		'$('*')')
			cmd=$(echo ${*} | sed 's|^\$(||' | sed 's|)$||') ;;
		"\`"*"\`")
			cmd=$(echo ${*} | sed 's|`||g') ;;
		*)
			list_add pkgname ${*}
		esac
	fi
	[ "${cmd}" -a "$(${cmd})" ] && return 0 || return 1
	for pkg in ${pkgname}; do
		pkg_exists ${pkg} && exists=1
	done
	if [ ${exists} -eq 0 ]; then
		echo "===> ${pkgname} is not installed, skipping command"
		return 1
	fi
	return 0
}

display_usage() {
	<< EOF >&2 cat
Usage: ${0##*/} [-h|-u|-w|-y]

    -h - show this help
    -u - don't update ports tree
    -w - wait for key press after finish
    -y - answer yes to all questions

EOF
	exit 1
}

get_entry_dates() {
	egrep "^[0-9]{8}:" ${PORTSDIR}/UPDATING | sed 's/://'
}

get_moved_ports() {
	awk -F '|' -v date="${1}" '
	!/^#/ && NR = 4 && $2 {
		gsub("-", "", $3);
		if ($3 > date)
			print $1 ":" $2;
	}' ${PORTSDIR}/MOVED
}

get_removed_ports() {
	awk -F '|' -v date="${1}" '
	!/^#/ && NR = 4 && !$2 {
		gsub("-", "", $3);
		if ($3 > date)
			print $1;
	}' ${PORTSDIR}/MOVED
}

list_add() {
	local name=${1} list=$(eval echo $"$1")

	shift 1
	for arg in ${*}; do
		case ${list} in *${arg}*) continue ;; esac
		list="${list} ${arg}"
	done
	setvar ${name} "${list}"
}

list_find() {
	local name=${1} list=$(eval echo $"$1")

	shift 1
	for arg in ${*}; do
		case ${list} in *${arg}*) return 0 ;; esac
	done
	return 1
}

list_remove() {
	local name=${1} list=$(eval echo $"$1")

	shift 1
	for arg in ${*}; do
		case ${list} in *${arg}*)
			list=$(echo ${list} | sed "s|${arg} *||") ;;
		esac
	done
	setvar ${name} "${list}"
}

pkg_exists() {
	[ "${1}" ] || return 1
	pkg-static info --exists ${1} >/dev/null 2>&1
}

pm_fake_run() {
	local new_origin

	while getopts "Rfo:r:w" opt; do
		case ${opt} in
		f|w|R)
			;;
		o)
			new_origin=${OPTARG} ;;
		r)
			list_add need_reinstall $(to_port_str ${OPTARG})
			list_add need_reinstall $(pkg-static query %ro ${OPTARG})
		esac
	done
	shift $((OPTIND-1))
	if [ "${new_origin}" ]; then
		${SUDO} pkg-static set -o ${*}:${new_origin} --yes
		return ${?}
	fi
	new_origin=$(to_port_str ${*})
	if [ "${new_origin}" ]; then
		list_add need_reinstall ${new_origin}
		echo "===> Found packages to reinstall in later stage"
		return 0
	else
		return 1
	fi
}

ports_upgrade_sort() {
	echo ${*} | tr ' ' '\n' | awk '
	function partition(a, s, e) {
		i = s-1; j = e+1;

		while(1) {
			do i++; while (ports_cmp(a[i], a[s]) < 0)
			do j--; while (ports_cmp(a[j], a[s]) > 0)

			if (i >= j)
				return j;

			tmp = a[i]; a[i] = a[j]; a[j] = tmp;
		}
	}
	function ports_cmp(a, b) {
		if (match(port_deps[b], a))
			return -1;
		if (match(port_deps[a], b))
			return 1;
		return port_ndeps[a] - port_ndeps[b];
	}
	function qsort(a, start, end) {
		if (start >= end)
			return;
		p = partition(a, start, end);
		qsort(a, start, p);
		qsort(a, p+1, end);
	}
	{
		ports[++n_ports] = $0;
		while ("make -C " ENVIRON["PORTSDIR"] "/" $0 " all-depends-list" | getline line) {
			sub(ENVIRON["PORTSDIR"] "/", " ", line);
			port_deps[$0] = port_deps[$0] line;
			port_ndeps[$0]++;
		}
	}
	END {
		qsort(ports, 1, n_ports);
		for(x=1; x<=n_ports; x++)
			print ports[x];
	}'
}

print_list() {
	[ "${2}" ] || return
	printf "\n${1}\n"
	for item in ${2}; do printf "\t${item}\n" | sed 's|@| |g'; done | sort
}

rebuild_ports() {
	echo "===> Calculating ports upgrade order"
	for port in $(ports_upgrade_sort ${*}); do
		list_find build_skipped ${port} && continue
		[ -d ${PORTSDIR}/${port} ] || continue
		cd ${PORTSDIR}/${port}
		[ -d work ] && ${SUDO} make clean
		pkg_exists ${port} && make_cmd="reinstall" || make_cmd="install"
		${SUDO} make ${make_args} ${make_cmd} clean
		if [ ${?} -ne 0 ]; then
			list_add build_failed ${port}
			consumers=$(pkg-static query %ro ${port})
			[ "${consumers}" ] || continue
			for con in ${consumers}; do
				list_find need_upgrade ${con} &&
					list_add build_skipped ${con}
			done
		fi
	done
}

removal_reason() {
	awk -F '|' -v port="${1}" '
	!/^#/ && NR = 4 && $1 == port { print $4 }' ${PORTSDIR}/MOVED
}

to_env_str() {
	echo "${1}" | sed -E 's,(\/|-),_,g'
}

to_inst_str() {
	local reqby str

	for port in ${*}; do
		reqby=$(eval echo \$$(to_env_str ${port})_reqby | sed 's| |@|g')
		list_add str "${port}@(required@by@${reqby})"
	done
	[ "${str}" ] && echo ${str}
}

to_pkg_str() {
	local curr new_ver str

	for port in ${1}; do
		if [ "${2}" = "UPGRADE" ]; then
			curr=$(pkg-static query "%n:@%v" ${port})
			new_ver=$(eval echo \$$(to_env_str ${port})_version)
			list_add str "${curr}@->@${new_ver}"
		else
			list_add str $(pkg-static query "%n-%v" ${port})
		fi
	done
	[ "${str}" ] && echo ${str}
}

to_port_str() {
	local str

	for arg in ${*}; do
		case ${arg} in
		*/*)
			[ -d "${PORTSDIR}/${arg}" ] && list_add str ${arg} ;;
		*)
			list_add str $(pkg-static query -x %o ^${arg})
		esac
	done
	[ "${str}" ] && echo ${str}
}

updating_commands() {
	awk -F ':' -v entry="${1}" '
	function strip_command(str) {
		sub("^[ \t#]*", "", str);
		in_cmd = sub(/\\$/, "", str);
		return str;
	}
	/^[0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9]:/ {
		if (entry == $1)
			in_entry=1;
		else if (in_entry)
			exit;
	}
	in_entry && !in_cmd {
		if (match($0, /^[ \t#]*(pkg|portmaster) /)) {
			cmd = strip_command($0);
			if (!in_cmd) {
				if (!match(cmd, "^pkg upgrade"))
					print cmd;
				cmd="";
			}
		}
		next;
	}
	in_entry && in_cmd {
		line = strip_command($0);
		if (in_cmd)
			cmd=cmd line;
		else {
			print cmd line;
			cmd="";
		}
	}' ${PORTSDIR}/UPDATING
}

updating_entry() {
	awk -F ':' -v entry="${1}" '
	/^[0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9]:/ {
		if (entry == $1)
			in_entry=1;
		else if (in_entry)
			exit;
	}
	in_entry { print $0 }' ${PORTSDIR}/UPDATING
}

# $1 - exit status
# $2 - last read/executed UPDATING entry
# $3 - wait for final keypress?
upgrade_exit() {
	local keywait=${3}

	[ "${2}" ] && echo ${2} > ${CONFIG}
	[ "${keywait}" ] || keywait=${wait_for_key}
	[ "${tmpfile}" -a -f "${tmpfile}" ] && rm -rf "${tmpfile}"

	if [ ${keywait} -eq 1 ]; then
		printf "\n===> Press Enter key to finish.\n\n"
		read key
	fi
	exit ${1}
}

while getopts "huwy" option; do
	case ${option} in
	u)
		skip_update=1 ;;
	w)
		wait_for_key=1 ;;
	y)
		answer_yes=1 ;;
	*)
		display_usage
	esac
done

if [ ! -d "${PORTSDIR}" ]; then
	echo "===> Ports directory not found: ${PORTSDIR}" >&2
	echo "===> Try setting PORTSDIR enviroment variable" >&2
	exit 1
fi

if [ $(id -u) -ne 0 ]; then
	if ! which sudo >/dev/null; then
		echo "===> sudo not found" >&2
		upgrade_exit 1
	fi
	SUDO="sudo"
fi

if [ -f "${CONFIG}" ]; then
	last_read="$(cat "${CONFIG}")"
else
	[ -d "${XDG_CONFIG_HOME}" ] || mkdir "${XDG_CONFIG_HOME}"
fi
[ "${last_read}" ] || last_read="$(get_entry_dates | head -n 1)"

if [ ${skip_update} -eq 0 ]; then
	if ! ${SUDO} portsnap fetch update; then
		echo "===> Ports tree update failed" >&2
		upgrade_exit 1
	fi
fi

for port in $(get_removed_ports ${last_read}); do
	if pkg_exists ${port}; then
		if ask_yesno "Remove obsolete ${port} ($(removal_reason ${port}))"
		then
			${SUDO} pkg-static delete --yes --force ${port}
		fi
	fi
done
for ports in $(get_moved_ports ${last_read}); do
	pkg_exists ${ports%%:*} &&
		${SUDO} pkg-static set --change-origin ${ports} --yes &&
		echo "===> Port ${ports%%:*} moved to ${ports##*:}"
done

last_upd="$(get_entry_dates | head -n 1)"

if [ ${last_read} -lt ${last_upd} ]; then
	tmpfile="$(mktemp -t ${0##*/})"
	if [ ! "${tmpfile}" ]; then
		echo "===> Failed to create temporary file" >&2
		upgrade_exit 1
	fi

	printf "===> New entries since last upgrade in ${PORTSDIR}/UPDATING file:\n\n"
	for entry in $(get_entry_dates | sort -u); do
		[ ${entry} -gt ${last_read} ] || continue

		updating_entry ${entry}
		updating_commands ${entry} > ${tmpfile}

		old_IFS=${IFS}
		IFS=$'\n'

		for cmd in $(cat ${tmpfile}); do
			command_is_valid ${cmd} || continue

			if ask_yesno "Run '${cmd}'"; then
				IFS=${old_IFS}
				case ${cmd} in
				"pkg "*)
					${SUDO} ${cmd} ;;
				*)
					pm_fake_run ${cmd%% *}
				esac
				ret=${?}
				IFS=$'\n'

				if [ ${ret} -ne 0 ]; then
					echo "===> Upgrade command '${cmd}' failed" >&2
					upgrade_exit ${ret} ${entry_prev}
				fi
			fi
		done

		IFS=${old_IFS}
		entry_prev="${entry}"
	done
fi

echo "===> Checking for ports needing upgrade"
for port in $(pkg-static version -o -l '<' | cut -f1 -d' '); do
	[ "$(pkg-static info -kq ${port})" = "yes" ] && continue
	list_add need_upgrade ${port}
	setvar $(to_env_str ${port})_version \
		$(make -C ${PORTSDIR}/${port} -VPKGVERSION)
	list_remove need_reinstall ${port}
done
if [ ! "${need_upgrade}" ]; then
	echo "===> No ports needing upgrade found"
	upgrade_exit 0 ${last_upd}
fi

for port in ${need_reinstall} ${need_upgrade}; do
	check_for_missing_deps ${port}
done

for port in ${need_upgrade} ${need_install}; do
	conflicts=$(make -C ${PORTSDIR}/${port} -VCONFLICTS -VCONFLICTS_BUILD \
		-VCONFLICTS_INSTALL)
	[ "${conflicts}" ] || continue
	for cnfl in ${conflicts}; do
		for origin in $(pkg-static query -g %o "${cnfl}"); do
			list_add need_remove $(pkg-static query %ro ${origin})
			if [ "${port}" = "${origin}" ]; then
				list_add conflicts_self ${port}
			else
				list_add need_remove ${origin}
			fi
		done
	done
done

print_list "Following packages need to be REMOVED:" "$(to_pkg_str "${need_remove}")"
print_list "Following ports need to be INSTALLED:" "$(to_inst_str ${need_install})"
print_list "Following packages will be REINSTALLED:" "$(to_pkg_str "${need_reinstall}")"
print_list "Following packages will be UPGRADED:" "$(to_pkg_str "${need_upgrade}" UPGRADE)"

if ask_yesno "Proceed with upgrade"; then
	[ "${need_remove}" ] &&
		${SUDO} pkg-static delete --yes ${need_remove} ${conflicts_self}
	rebuild_ports ${need_upgrade}
else
	upgrade_exit 0 ${last_upd}
fi

echo "===> Checking packages for missing libraries/dependencies"
for pkg in ${build_failed} ${build_skipped} $(pkg-static lock -lq); do
	list_add pkg_ignore $(pkg-static query %n ${pkg})
done
eval $(${SUDO} pkg-static check -dan | awk -v pkg_ignore="${pkg_ignore}" '
BEGIN {
	if ((n = split(pkg_ignore, array, " ")))
		for (i=1; i<=n; i++)
			ignore[array[i]] = array[i];
}
/has a missing dependency:/ {
	if ($6 in ignore)
		next;
	miss_deps[$1] = $1;
	if ($6 in install)
		next;
	"pkg-static rquery %o " $6 | getline missing;
	install[$6] = missing;
	inst = inst ? inst " " missing : missing;
}
/is missing a required shared library:/ {
	if ($1 in rebuild || $1 in ignore || $1 in miss_deps)
		next;
	"pkg-static query %o " $1 | getline origin;
	rebuild[$1] = origin;
	rinst = rinst ? rinst " " origin : origin;
}
END {
	print "check_install=\"" inst "\" check_rebuild=\"" rinst "\""
}')

if [ "${check_install}" -o "${check_rebuild}" ]; then
	print_list "Ports need to be INSTALLED:" "$(to_inst_str ${check_install})"
	print_list "Packages need to be REINSTALLED:" "$(to_pkg_str "${check_rebuild}")"
	if ask_yesno "Continue with changes"; then
		rebuild_ports ${check_install} ${check_rebuild}
		[ "${build_failed}" ] || upgrade_exit 1 ${last_upd}
	fi
fi
if [ "${build_failed}" ]; then
	printf "\nNot all ports were upgraded successfully, check your system and try again.\n"
	print_list "Following ports failed to be UPGRADED:" "${build_failed}"
	print_list "Following ports upgrades were SKIPPED:" "${build_skipped}"
	upgrade_exit 1 ${last_upd}
fi
upgrade_exit 0 ${last_upd}
