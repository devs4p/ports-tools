#!/bin/sh

readonly PAGER=${PAGER:-less}
readonly PORTSDIR=${PORTSDIR:-/usr/ports}

clean_only=0
dir_cache=""
dir_cache_ignore=""
non_interactive=0

ask_yesno() {
	[ $non_interactive -eq 0 ] || return 0

	while true; do
		echo -n "$1 (y/n)? [y] "
		
		read answer
		[ -n "$answer" ] || answer="y"

		case $answer in
		[Nn])
			return 1 ;;
		[Yy])
			return 0
		esac
	done
}

dir_cache_add() {
	local dir=$1

	case $dir_cache in
	*$dir*)
		;;
	*)
		dir_cache="$dir_cache $dir"
	esac
}

display_usage() {
	echo "Usage: pcommit [-c|-h|-n]"
	echo ""
	echo "    -c - clean temp files only"
	echo "    -h - show this help"
	echo "    -n - non-interactive mode"
	echo ""
	exit
}

file_add() {
	local file=$1

	case $file in *svn-commit*) return 1 ;; esac
	
	if ask_yesno "Add file $file"; then
	 	[ $non_interactive -eq 0 ] || echo "===> Adding file $file"
		svn -q add "$file"

		if [ -d "$file" ]; then
			for child in $(ls "$file"); do
				file_set_props "$file/$child"
			done
		fi

		return 0
	else
		return 1
	fi
}

file_remove() {
	local dir=$(dirname $1) file=$1

	if ask_yesno "Remove file $file"; then 
		[ $non_interactive -eq 0 ] || echo "===> Removing file $file"
		svn -q rm "$file"
		
		case $file in
		*files/*)
			dir_cache_add $dir ;;
		*scripts/*)
			dir_cache_add $dir
		esac
	else
		dir_cache_ignore="$dir_cache_ignore $dir"
	fi
}

file_set_props() {
	local file=$1
	
	[ -d "$file" -o ! -e "$file" ] && return 1
	
	case $(egrep -- '\$FreeBSD\$|\$[BDFSer]+:' "$file" >/dev/null || echo $?) in
	"")	# matched pattern
		svn -q -- propset svn:keywords "FreeBSD=%H" "$file"
		svn -q -- propdel fbsd:nokeywords "$file" ;;
	1)	# no match
		svn -q -- propset fbsd:nokeywords yes "$file"
		svn -q -- propdel svn:keywords "$file" ;;
	esac

	if [ "${_file##/*}" != "bsd.port.mk" ] ; then
		svn -q -- propset svn:eol-style native "$file"
	fi
	svn -q -- propset svn:mime-type text/plain "$file"
	svn -q -- propdel cvs2svn:cvs-rev "$file"
}

remove_empty_dirs() {
	for dir in "$dir_cache"; do
		[ -d $dir ] || continue
		case $dir_cache_ignore in *$dir*) continue ;; esac
		
		if [ -z "$(ls $dir 2>&1)" ]; then
			echo "===> Removing empty dir $dir"
			svn -q rm $dir
		fi
	done
}

while getopts "chn" option; do
	case $option in
	c)
		clean_only=1 ;;
	n)
		non_interactive=1 ;;
	*)
		display_usage
	esac
done

if [ -n "$(make -V PORTNAME)" ]; then
	depth=2
else 
	if [ -n "$(make -V PORTSTOP)" ]; then
		depth=4
		clean_exp="-and -not -path './.svn/*'"
	else
		depth=3
	fi
fi

wrk_dirs=$(find . -name work -type d -depth $((depth-1)) | sed 's|^./||g')
if [ -n "$wrk_dirs" ]; then
	for wdir in $wrk_dirs; do
		if [ $depth -ne 2 ]; then
			echo "===> Running 'make clean' in ${wdir%%/work}"
			make_args="-C ${wdir%%/work}"
		else
			echo "===> Running 'make clean'"
			make_args=""
		fi

		ret=$(make $make_args clean 2>/dev/null)
		if [ -n "$(echo $ret | grep 'not writable')" ]; then
			if [ $depth -ne 2 ]; then
				echo "===> Failed to 'make clean' in ${wdir%%/work}"
			else
				echo "===> Failed to 'make clean'"
			fi
			exit 1
		fi
	done
fi

rej_files=$(find . -name "*.rej" -maxdepth $depth | sed 's|^./||g')
if [ -n "$rej_files" ]; then
	echo "===> Found rejected patch files"
	echo $rej_files | tr ' ' '\n'
	exit 1
fi

old_files=$(find . \( -name "*.orig" -or -name "svn-commit.*" -or -size 0 \) \
		$clean_exp -delete -print -maxdepth $depth | sed 's|^./||g')
if [ -n "$old_files" ]; then
	echo "===> Removed old temporary files"
	echo $old_files | tr ' ' '\n'
	echo ""
fi

[ $clean_only -eq 0 ] || exit

tempfile=$(mktemp -t pcommit)
svn --show-updates status > $tempfile

if [ $? -ne 0 ]; then
	echo "===> 'svn status' failed"
	rm $tempfile
	exit 1 
fi

old_IFS=$IFS
IFS=$'\n'

for line in $(cat $tempfile); do
	change=$(echo "$line" | awk '{
		if (match($0, "^Status"))
			next;
			
		mod = substr($0,1,1);
		if (mod == "?")
			mod="N";
		
		upg = substr($0,9,1);
		if (mod == "M" && upg == "*")
			mod="U";
		
		print mod;
	}')
	[ "$change" = " " -o -z "$change" ] && continue
	file=$(echo "$line" | awk '{ print $NF }')
	tracked=0

	case $change in
	!)
		file_remove "$file"
		tracked=1 ;;
	N)
		file_add "$file"
		tracked=$? ;;
	U)
		echo "===> Updating $file"
		svn -q update "$file"
	esac

	[ $tracked -eq 1 ] || file_set_props "$file"
done

rm $tempfile
IFS=$old_IFS

remove_empty_dirs

if [ $non_interactive -eq 1 ]; then
	svn commit
	exit $?
fi

while true; do
	echo ""
	echo "[c]ommit [v]iew diff [s]vn status [q]uit"
	echo -n "> "
	read cmd
	
	case $cmd in
	[Cc])
		svn commit
		exit $? ;;
	[Qq])
		exit ;;
	[Ss])
		svn status ;;
	[Vv])
		svn diff | $PAGER ;;
	*)
		echo "No such command: $cmd"
	esac
done
