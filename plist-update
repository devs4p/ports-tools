#!/bin/sh

readonly PAGER="${PAGER:-less}"
readonly PAGER_DIFF="${PAGER_DIFF:-$PAGER}"
readonly PKGNAME="$(make -V PKGNAME 2>/dev/null)"
readonly PLIST="$(make -V PLIST 2>/dev/null)"

display_usage() {
	<< EOF >&2 cat
Usage: plist-update [-h] [-s <subname>]

    -h show this help
    -s insert new entries with %%subname%% prefix

EOF
	exit 1
}

awk_args="-v plist_file=${PLIST}"

while getopts "hs:" option; do
	case ${option} in
	s)
		awk_args="${awk_args} -v subname=${OPTARG}" ;;
	*)
		display_usage
	esac
done

if [ -z "$(whereis -bq plist-sort)" ]; then
	echo "===> Required script plist-sort not found" >&2
	exit 1
fi

if [ -z "${PKGNAME}" ]; then
	echo "===> This is not port directory" >&2
	exit 1
fi

tempfile="$(mktemp -t tb-plist-update)"
if [ -z "${tempfile}" ]; then
	echo "===> Failed to create temporary file" >&2
	exit 1
fi
[ -f pkg-plist ] && plist_out="pkg-plist.new" || plist_out="pkg-plist"

make_args="OPTIONSFILE=/dev/null OPTIONS_FILE=/dev/null"

for opt in $(make -VCOMPLETE_OPTIONS_LIST); do
	make_args="${make_args} WITHOUT_${opt}=true"
done

for sub in $(make ${make_args} -VPLIST_SUB); do
	case ${sub} in *@comment*)
		options_subs="${options_subs} ${sub%%=*}"
	esac
done

make_args="$(echo ${make_args} | sed 's/WITHOUT/WITH/g')"

make check-plist 2>&1 | awk ${awk_args} -v options_subs="${options_subs}" \
	-v plist_subs="$(make ${make_args} -V PLIST_SUB)" '
BEGIN {
	n = split(options_subs, s_array, " ");
	for (i=1; i<=n; i++)
		opt_subs[s_array[i]] = s_array[i];

	n = split(plist_subs, array, " ");
	for (pair=1; pair<=n; pair++) {
		if (split(array[pair], p_array, "=") != 2)
			continue;

		if (opt_subs[p_array[1]] != "")
			continue;

		gsub("\"", "", p_array[2]);
		if (p_array[2] != "" && p_array[2] != "@comment")
			subs[p_array[1]] = p_array[2];
	}

	if (plist_file != "") {
		while ((getline line < plist_file) > 0) {
			n = index(line, "@dir");
			k = index(line, "@sample");

			if (n > 0 || k > 0) {
				i = split(substr(line,n>0 ? n : k), p,  " ");
				plist[ no_subs_path(p[2]) ] = line;
			} else 
				plist[ no_subs_path(line) ] = line;
		}
		close(plist_file);
	}
	if (subname != "")
		subname = "%%" subname "%%";
}

function get_plist_path() {
	$1 = $2 = "";
	if ($3 == "@dir")
		$3 = "";

	sub("^ *", "", $0);
	return $0;
}

function no_subs_path(path) {
	new_path = "";

	n = split(path, array, "%%");
	if (n == 1)
		return path;

	for (i=1; i<=n; i++) {
		if (opt_subs[array[i]] != "")
			continue;

		if (subs[array[i]] != "") {
			new_path = new_path subs[array[i]];
			continue;
		}
		new_path = new_path array[i];
	}

	return new_path;
}

/^Error: Missing:/ {
	path = get_plist_path();
	path = no_subs_path(path);

	if (plist[path] != "")
		delete plist[path];
}

/^Error: Orphaned:/ {
	dir = ($3 == "@dir") ? "@dir " : "";
	path = get_plist_path();
	ns_path = no_subs_path(path);

	if (plist[ns_path] == "")
		plist[ns_path] = subname dir path;
}

END {
	for (file in plist) {
		if (plist[file] != "") {
			print plist[file];
			#printf("file <%s> var <%s>\n", file, plist[file]);
		}
	}

}' > ${tempfile}

plist-sort ${tempfile} > ${plist_out}
rm ${tempfile}
[ "${plist_out}" = "pkg-plist" ] && exit

cmp -s pkg-plist ${plist_out}
if [ ${?} -eq 1 ]; then
	diff -u pkg-plist ${plist_out} | ${PAGER_DIFF}
	
	while true; do
		echo -n "Use newly generated plist (y/n)? "
		read cmd
		case ${cmd} in
		[Yy])
			mv ${plist_out} pkg-plist
			break ;;
		[Nn])
			break
		esac
	done
else
	rm ${plist_out}
fi
